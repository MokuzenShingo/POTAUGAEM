)
dat$train.fit_year <- dat$train.fit / 10
dat$valid.fit_year <- dat$valid.fit  # revers の場合は1/2
train.fit_gene_mean <- tapply(dat$train.fit_year, INDEX = as.factor(dat$gene), mean)
valid.fit_gene_mean <- tapply(dat$valid.fit_year, INDEX = as.factor(dat$gene), mean)
bestGeneration <- which.max(valid.fit_gene_mean)
par(mar=c(4,4,1,4))
plot(valid.fit_gene_mean, type = "l", xlab = "generation", ylab="validation fitness")
par(new=TRUE)
plot(train.fit_gene_mean, type = "l", col = 2, xlab = "", ylab="", axes=FALSE)
axis(side=4)
mtext("training TWR", side = 4, line=3)
legend("bottomright",
legend = c("validation", "training", paste0("best generation : ", bestGeneration)),
lty=c(1, 1, 0), col=c(1, 2, 1), bty="n")
dat_bestGeneration <- dat[dat$gene == bestGeneration,]
valid.fit_mean <- cumsum(dat_bestGeneration$valid.fit_year) / 1:nrow(dat_bestGeneration)
plot(valid.fit_mean, type = "l", xlab = "number of submodel", ylab = "average validation fitness")
ens <- readRDS("./data/result/USDJPYhour_ense_500.rds")
ens <- readRDS("../data/result/USDJPYhour_ense_500.rds")
ens_nos <- readRDS("./data/result/USDJPYhour_ense_norev500_USDJPYhour_valid_rev500__no_shuffle_summary_2017.rds")
mea_nos <- readRDS("./data/result/USDJPYhour_mean_500_no_suffle.rds")
symbol.name <- c("USDJPYhour")
test.period <- c("2016-01-01::2017-12-31") # テストデータの期間
load("./data/realtimeData.RData")  # ヒストリーデータ読み込み
symbol <- realtimeData[[symbol.name]]
test.data <- symbol[test.period]  # 検証期間のデータを抽出
test.data <- na.omit(test.data)
temp <- cbind(ens$return_cumsum, mea$return_cumsum,
ens_nos$return_cumsum, mea_nos$return_cumsum,
test.data$close)
plot(temp[,1],minor.ticks=FALSE, main ="", ylab = "cumulative return")
lines(temp[,2], col = 2)
lines(temp[,3], col = 3)
lines(temp[,4], col = 4)
legend("topleft", legend=c("Ensemble", "Average", "Ensemble (no shuffle)", "Average (no shuffle)"), lty=c(1, 1, 1, 1), col=1:4, bty="n")
plot(temp[,3],minor.ticks=FALSE, main ="", ylab = "cumulative return")
lines(temp[,4], col = 2)
legend("topleft", legend=c("Ensemble", "Average"), lty=c(1, 1), col=1:2, bty="n")
setwd("/Users/kurodakazuma/Desktop/GNNTrader")
library(xts)
library(quantmod)
trainResults <- readRDS("./data/result/valid500_no_shuffle.rds")
symbol.name <- c("USDJPYhour")
dat <- data.frame(trainID  = trainResults$trainID,
gene     = trainResults$generation,
train.fit = trainResults$train.fit,
valid.fit = trainResults$valid.fit
)
dat$train.fit_year <- dat$train.fit / 10
dat$valid.fit_year <- dat$valid.fit  # revers の場合は1/2
train.fit_gene_mean <- tapply(dat$train.fit_year, INDEX = as.factor(dat$gene), mean)
valid.fit_gene_mean <- tapply(dat$valid.fit_year, INDEX = as.factor(dat$gene), mean)
par(mar=c(4,4,1,4))
plot(valid.fit_gene_mean, type = "l", xlab = "generation", ylab="validation fitness")
par(new=TRUE)
plot(train.fit_gene_mean, type = "l", col = 2, xlab = "", ylab="", axes=FALSE)
axis(side=4)
mtext("training TWR", side = 4, line=3)
legend("bottomright",
legend = c("validation", "training", paste0("best generation : ", bestGeneration)),
lty=c(1, 1, 0), col=c(1, 2, 1), bty="n")
bestGeneration <- which.max(valid.fit_gene_mean)
dat_bestGeneration <- dat[dat$gene == bestGeneration,]
valid.fit_mean <- cumsum(dat_bestGeneration$valid.fit_year) / 1:nrow(dat_bestGeneration)
plot(valid.fit_mean, type = "l", xlab = "number of submodel", ylab = "average validation fitness")
ens_nos <- readRDS("./data/result/USDJPYhour_ense_norev500_USDJPYhour_valid_rev500__no_shuffle_summary_2017.rds")
mea_nos <- readRDS("./data/result/USDJPYhour_mean_500_no_suffle.rds")
symbol.name <- c("USDJPYhour")
test.period <- c("2016-01-01::2017-12-31") # テストデータの期間
load("./data/realtimeData.RData")  # ヒストリーデータ読み込み
symbol <- realtimeData[[symbol.name]]
test.data <- symbol[test.period]  # 検証期間のデータを抽出
test.data <- na.omit(test.data)
temp <- cbind(#ens$return_cumsum, mea$return_cumsum,
ens_nos$return_cumsum, mea_nos$return_cumsum,
test.data$close)
temp <- na.locf(temp)
temp <- na.omit(temp)
temp <- temp[,1:2]
plot(temp[,1],minor.ticks=FALSE, main ="", ylab = "cumulative return")
lines(temp[,2], col = 2)
View(temp)
tail(temp)
View(ens_nos)
tail(ens_nos)
sum(ens_nos$return > 0)
sum(ens_nos$return > 0) / tail(ens_nos)$tradeID
View(mea_nos)
head(mea_nos)
View(ens_nos)
View(mea_nos)
mea_sub <-
ncol(mea_nos)
View(mea_nos)
mea_sub <- mea_nos[,-501]
head(mea_sub)
sum(mea_sub == 0)
sum(mea_sub == 0) / 500
sum(mea_sub != 0) / 500
sum(mea_sub > 0) / sum(mea_sub != 0)
par(mar=c(4,4,1,4))
plot(valid.fit_gene_mean, type = "l", xlab = "generation", ylab="validation fitness")
par(new=TRUE)
plot(train.fit_gene_mean, type = "l", col = 2, xlab = "", ylab="", axes=FALSE)
axis(side=4)
mtext("training TWR", side = 4, line=3)
bestGeneration <- which.max(valid.fit_gene_mean)
par(mar=c(4,4,1,4))
plot(valid.fit_gene_mean, type = "l", xlab = "generation", ylab="validation fitness")
par(new=TRUE)
plot(train.fit_gene_mean, type = "l", col = 2, xlab = "", ylab="", axes=FALSE)
axis(side=4)
mtext("training fitness", side = 4, line=3)
legend("bottomright",
legend = c("validation", "training", paste0("best generation : ", bestGeneration)),
lty=c(1, 1, 0), col=c(1, 2, 1), bty="n")
legend("bottomright",
legend = c("validation", "training"),# paste0("best generation : ", bestGeneration)),
lty=c(1, 1), col=c(1, 2), bty="n")
par(mar=c(4,4,1,4))
plot(valid.fit_gene_mean, type = "l", xlab = "generation", ylab="validation fitness")
par(new=TRUE)
plot(train.fit_gene_mean, type = "l", col = 2, xlab = "", ylab="", axes=FALSE)
axis(side=4)
mtext("training fitness", side = 4, line=3)
legend("bottomright",
legend = c("validation", "training"),# paste0("best generation : ", bestGeneration)),
lty=c(1, 1), col=c(1, 2), bty="n")
plot(temp[,1],minor.ticks=FALSE, main ="", ylab = "cumulative return")
lines(temp[,2], col = 2)
?plot.xts()
plot(temp[,1],minor.ticks=FALSE,majyor.ticks ="month", main ="", ylab = "cumulative return")
plot(temp[,1],minor.ticks=FALSE,major.ticks ="month", main ="", ylab = "cumulative return")
plot(temp[,1],minor.ticks=FALSE,major.ticks= "years", main ="", ylab = "cumulative return")
plot(temp[,1],minor.ticks=FALSE,major.ticks= "months", main ="", ylab = "cumulative return")
plot(temp[,1],minor.ticks=FALSE,major.format="%b-%Y", main ="", ylab = "cumulative return")
lines(temp[,2], col = 2)
legend("topleft", legend=c("Ensemble", "Average"), lty=c(1, 1), col=1:2, bty="n")
setwd("/Users/kurodakazuma/Desktop/GNNTrader")
library(xts)
library(quantmod)
trainResults <- readRDS("./data/result/valid500_no_shuffle.rds")
symbol.name <- c("USDJPYhour")
dat <- data.frame(trainID  = trainResults$trainID,
gene     = trainResults$generation,
train.fit = trainResults$train.fit,
valid.fit = trainResults$valid.fit
)
dat$train.fit_year <- dat$train.fit / 10
dat$valid.fit_year <- dat$valid.fit  # revers の場合は1/2
train.fit_gene_mean <- tapply(dat$train.fit_year, INDEX = as.factor(dat$gene), mean)
valid.fit_gene_mean <- tapply(dat$valid.fit_year, INDEX = as.factor(dat$gene), mean)
bestGeneration <- which.max(valid.fit_gene_mean)
par(mar=c(4,4,1,4))
plot(valid.fit_gene_mean, type = "l", xlab = "generation", ylab="validation fitness")
par(new=TRUE)
plot(train.fit_gene_mean, type = "l", col = 2, xlab = "", ylab="", axes=FALSE)
axis(side=4)
mtext("training fitness", side = 4, line=3)
legend("bottomright",
legend = c("validation", "training"),# paste0("best generation : ", bestGeneration)),
lty=c(1, 1), col=c(1, 2), bty="n")
dat_bestGeneration <- dat[dat$gene == bestGeneration,]
valid.fit_mean <- cumsum(dat_bestGeneration$valid.fit_year) / 1:nrow(dat_bestGeneration)
plot(valid.fit_mean, type = "l", xlab = "number of submodel", ylab = "average validation fitness")
ens_nos <- readRDS("./data/result/USDJPYhour_ense_norev500_USDJPYhour_valid_rev500__no_shuffle_summary_2017.rds")
mea_nos <- readRDS("./data/result/USDJPYhour_mean_500_no_suffle.rds")
symbol.name <- c("USDJPYhour")
test.period <- c("2016-01-01::2017-12-31") # テストデータの期間
load("./data/realtimeData.RData")  # ヒストリーデータ読み込み
symbol <- realtimeData[[symbol.name]]
test.data <- symbol[test.period]  # 検証期間のデータを抽出
test.data <- na.omit(test.data)
temp <- cbind(#ens$return_cumsum, mea$return_cumsum,
ens_nos$return_cumsum, mea_nos$return_cumsum,
test.data$close)
temp <- na.locf(temp)
temp <- na.omit(temp)
temp <- temp[,1:2]
tail(temp)
tail(ens_nos)
sum(ens_nos$return > 0) / tail(ens_nos)$tradeID
mea_sub <- mea_nos[,-501]
sum(mea_sub != 0) / 500
sum(mea_sub > 0) / sum(mea_sub != 0)
plot(temp[,1],minor.ticks=FALSE,major.format="%b-%Y", main ="", ylab = "cumulative return")
lines(temp[,2], col = 2)
lines(temp[,4], col = 2)
plot(temp[,3],minor.ticks=FALSE, main ="", ylab = "cumulative return")
legend("topleft", legend=c("Ensemble", "Average"), lty=c(1, 1), col=1:2, bty="n")
plot(temp[,1],minor.ticks=FALSE,major.format="%b-%Y", main ="", ylab = "cumulative return")
lines(temp[,2], col = 2)
legend("topleft", legend=c("Ensemble", "Average"), lty=c(1, 1), col=1:2, bty="n")
setwd("/Users/kurodakazuma/Desktop/GNNTrader")
library(xts)
library(quantmod)
trainResults <- readRDS("./data/result/valid500_no_shuffle.rds")
symbol.name <- c("USDJPYhour")
dat <- data.frame(trainID  = trainResults$trainID,
gene     = trainResults$generation,
train.fit = trainResults$train.fit,
valid.fit = trainResults$valid.fit
)
dat$train.fit_year <- dat$train.fit / 10
dat$valid.fit_year <- dat$valid.fit  # revers の場合は1/2
train.fit_gene_mean <- tapply(dat$train.fit_year, INDEX = as.factor(dat$gene), mean)
valid.fit_gene_mean <- tapply(dat$valid.fit_year, INDEX = as.factor(dat$gene), mean)
bestGeneration <- which.max(valid.fit_gene_mean)
par(mar=c(4,4,1,4))
plot(valid.fit_gene_mean, type = "l", xlab = "generation", ylab="validation fitness")
par(new=TRUE)
plot(train.fit_gene_mean, type = "l", col = 2, xlab = "", ylab="", axes=FALSE)
axis(side=4)
mtext("training fitness", side = 4, line=3)
legend("bottomright",
legend = c("validation", "training"),# paste0("best generation : ", bestGeneration)),
lty=c(1, 1), col=c(1, 2), bty="n")
dat_bestGeneration <- dat[dat$gene == bestGeneration,]
valid.fit_mean <- cumsum(dat_bestGeneration$valid.fit_year) / 1:nrow(dat_bestGeneration)
plot(valid.fit_mean, type = "l", xlab = "number of submodel", ylab = "average validation fitness")
ens_nos <- readRDS("./data/result/USDJPYhour_ense_norev500_USDJPYhour_valid_rev500__no_shuffle_summary_2017.rds")
mea_nos <- readRDS("./data/result/USDJPYhour_mean_500_no_suffle.rds")
symbol.name <- c("USDJPYhour")
test.period <- c("2016-01-01::2017-12-31") # テストデータの期間
load("./data/realtimeData.RData")  # ヒストリーデータ読み込み
symbol <- realtimeData[[symbol.name]]
test.data <- symbol[test.period]  # 検証期間のデータを抽出
test.data <- na.omit(test.data)
temp <- cbind(#ens$return_cumsum, mea$return_cumsum,
ens_nos$return_cumsum, mea_nos$return_cumsum,
test.data$close)
temp <- na.locf(temp)
temp <- na.omit(temp)
temp <- temp[,1:2]
tail(temp)
tail(ens_nos)
sum(ens_nos$return > 0) / tail(ens_nos)$tradeID
mea_sub <- mea_nos[,-501]
sum(mea_sub != 0) / 500
sum(mea_sub > 0) / sum(mea_sub != 0)
plot(temp[,1],minor.ticks=FALSE,major.format="%b-%Y", main ="", ylab = "cumulative return")
lines(temp[,2], col = 2)
legend("topleft", legend=c("Ensemble", "Average", "Ensemble (no shuffle)", "Average (no shuffle)"), lty=c(1, 1, 1, 1), col=1:4, bty="n")
plot(temp[,3],minor.ticks=FALSE, main ="", ylab = "cumulative return")
plot(temp[,3],minor.ticks=FALSE, main ="", ylab = "cumulative return")
plot(temp[,1],minor.ticks=FALSE,major.format="%b-%Y", main ="", ylab = "cumulative return")
lines(temp[,2], col = 2)
legend("topleft", legend=c("Ensemble", "Average"), lty=c(1, 1), col=1:2, bty="n")
source("./helper.R")
symbol.name <- c("USDJPYhour")
train.period <- c("2010-01-01::2014-12-31") # set training period
hidden.size <- 6
nn.model <- data.frame(RSI = rep(0, 3), diffADX = rep(0, 3), uniDMI = rep(0, 3),  # input  layer
Signal = c("-1", "0", "1")                                 # output layer
)
wts.size <- ncol(nn.model) * hidden.size + (hidden.size + 1) * 3  # number of connection
popSize <- 100  # set to population size
maxiter <- 500  # max iterations(generations)
min <- c( 1,  1,  1,  1,  8, 3, rep(0, wts.size))
max <- c(10, 10, 10, 10, 35, 8, rep(1, wts.size))
gaControl("real-valued" = list(crossover = "gareal_laplaceCrossover"))
load("../data/realtimeData2.RData")           # load historical data
symbol <- realtimeData[[symbol.name]]        # extract data of currency pairs
symbol <- realtimeData2[[symbol.name]]        # extract data of currency pairs
View(realtimeData2)
source("./helper.R")
symbol.name <- "USDJPYhour"
train.period <- c("2010-01-01::2014-12-31") # set training period
hidden.size <- 6
nn.model <- data.frame(RSI = rep(0, 3), diffADX = rep(0, 3), uniDMI = rep(0, 3),  # input  layer
Signal = c("-1", "0", "1")                                 # output layer
)
wts.size <- ncol(nn.model) * hidden.size + (hidden.size + 1) * 3  # number of connection
popSize <- 100  # set to population size
maxiter <- 500  # max iterations(generations)
min <- c( 1,  1,  1,  1,  8, 3, rep(0, wts.size))
max <- c(10, 10, 10, 10, 35, 8, rep(1, wts.size))
gaControl("real-valued" = list(crossover = "gareal_laplaceCrossover"))
symbol <- load("../data/realtimeData2.RData")  # load historical data
train.data <- na.omit(symbol[train.period])  # extract data of training period
train.data <- revers_trend(train.data)   # add revers trend
load("../data/realtimeData2.RData")  # load historical data
train.data <- na.omit(realtimeData2[train.period])  # extract data of training period
train.data <- revers_trend(train.data)   # add revers trend
indicators <- get_indicators(train.data)
chart_Series(realtimeData2)
train_bind <- function(trainDir, outputFile.name){
trainFiles <- dir(trainDir)
temp <- lapply(trainFiles, function(files) {
dat <- readRDS(paste0(trainDir, files))
dat$trainID <- files
dat
})
trainResults <- do.call(rbind, temp)
saveRDS(trainResults, outputFile.name)
}
train_bind(trainDir = "../data/result/train/", outputFile.name =  "../data/result/train500a.rds")
valid_bind <- function(validDir, outputFile.name){
validFiles <- dir(validDir)
temp <- lapply(validFiles, function(files) readRDS(paste0(validDir, files)))
validResults <- do.call(rbind, temp)
saveRDS(validResults, outputFile.name)
}
valid_bind(validDir = "../data/result/valid/", outputFile.name =  "../data/result/valid500a.rds")
source("./R/helper.R")
source("./helper.R")
symbol.name <- c("USDJPYhour")  # set currency pairs : USDJPYhour, EURJPYhour, GBPJPYhour, EURUSDhour, GBPUSDhour, EURGBPhour
valid.period <- c("2015-01-01::2015-12-31") # set validation period
hidden.size <- 6
nn.model <- data.frame(RSI = rep(0, 3), diffADX = rep(0, 3), uniDMI = rep(0, 3),  # input  layer
Signal = c("-1", "0", "1")                                 # output layer
)
wts.size <- ncol(nn.model) * hidden.size + (hidden.size + 1) * 3  # number of connection
trainResults <- readRDS("../data/result/train500.rds")
trainResults <- trainResults[1:50000,]  ## valid_1 : 1:50000, valid_2 : 50001:100000, ... ,valid_5 : 200001:250000
load("../data/realtimeData2.RData")           # load historical data
symbol <- realtimeData2[[symbol.name]]        # extract data of currency pairs
valid.data <- na.omit(realtimeData2[valid.period])  # extract data of validation period
chart_Series(valid.data)
valid_bind <- function(validDir, outputFile.name){
validFiles <- dir(validDir)
temp <- lapply(validFiles, function(files) readRDS(paste0(validDir, files)))
validResults <- do.call(rbind, temp)
saveRDS(validResults, outputFile.name)
}
valid_bind(validDir = "../data/result/valid/", outputFile.name =  "../data/result/valid500a.rds")
trainResults <- readRDS("../data/result/valid500.rds")
symbol.name <- c("USDJPYhour")
dat <- data.frame(trainID  = trainResults$trainID,
gene     = trainResults$generation,
train.fit = trainResults$train.fit,
valid.fit = trainResults$valid.fit
)
library(xts)
library(quantmod)
trainResults <- readRDS("../data/result/valid500.rds")
symbol.name <- c("USDJPYhour")
dat <- data.frame(trainID  = trainResults$trainID,
gene     = trainResults$generation,
train.fit = trainResults$train.fit,
valid.fit = trainResults$valid.fit
)
View(trainResults)
View(dat)
dat <- data.frame(trainID  = trainResults$trainID,
generation     = trainResults$generation,
train.fit = trainResults$train.fit,
valid.fit = trainResults$valid.fit
)
dat$train.fit_year <- dat$train.fit / 10
dat$valid.fit_year <- dat$valid.fit
train.fit_gene_mean <- tapply(dat$train.fit_year, INDEX = as.factor(dat$generation), mean)
valid.fit_gene_mean <- tapply(dat$valid.fit_year, INDEX = as.factor(dat$generation), mean)
bestGeneration <- which.max(valid.fit_gene_mean)
par(mar=c(4,4,1,4))
plot(valid.fit_gene_mean, type = "l", xlab = "generation", ylab="validation fitness")
par(new=TRUE)
plot(train.fit_gene_mean, type = "l", col = 2, xlab = "", ylab="", axes=FALSE)
axis(side=4)
mtext("training fitness", side = 4, line=3)
legend("bottomright",
legend = c("validation", "training"),# paste0("best generation : ", bestGeneration)),
lty=c(1, 1), col=c(1, 2), bty="n")
dat_bestGeneration <- dat[dat$generation == bestGeneration,]
validTWR_mean <- cumsum(dat_bestGeneration$valid.fit_year) / 1:nrow(dat_bestGeneration)
plot(validTWR_mean, type = "l",
main = paste0("bestGeneration : ", bestGeneration),
xlab = "number of submodel")
symbol.name <- c("USDJPYhour")
saveRDS(validResult, paste0("../data/result/",symbol.name, "_bestGeneration.rds"))
source("./helper.R")
symbol.name <- c("USDJPYhour")
test.period <- c("2016-01-01::2017-07-01") # set test period
hidden.size <- 6
nn.model <- data.frame(RSI = rep(0, 3), diffADX = rep(0, 3), uniDMI = rep(0, 3),  # input  layer
Signal = c("-1", "0", "1")                                 # output layer
)
wts.size <- ncol(nn.model) * hidden.size + (hidden.size + 1) * 3  # number of connection
validResult <- readRDS(paste0("../data/result/", symbol.name, "_bestGeneration.rds"))
load("../data/realtimeData2.RData")  # load historical data
test.data <- na.omit(realtimeData2[test.period])    # extract data of test period
indicators <- get_indicators(test.data)
gtype <- gtype.ini(validResult)                                  # gtype
signal.table <- signal.table.ini(validResult, data = test.data)  # signal.table
position.table <- position.table.ini(data = test.data)           # position.table
for(step in 1:(nrow(test.data) - 1)){
# generates the trading action each agent
step.sig <- apply(gtype, 1, function(x){
ID <- x[length(x)]
x <- as.numeric(x[-length(x)])
ind.sig(gtype = x,
curr.price  = test.data[step,],
curr.vola   = indicators[[4]][step, 1],
signal      = signal.table[step, ID],
posi.price  = position.table[step, c("open", "high", "low", "close")],
posi.flag   = position.table[step,"posi.flag"]
)
})
# combine the output of agents
ense.sig <- as.integer(mode(step.sig))
# update the position
position.table[step + 1,] <- updata.position(ense.sig,
posi.price = position.table[step, c("open", "high", "low", "close")],
posi.flag  = position.table[step,"posi.flag"],
next.price = test.data[step +1,]
)
print(paste(step, " / " , nrow(test.data) - 1))
}
orderbook <- cbind(test.data, position.table)
orderbook$trade.flag <- abs(diff(orderbook$posi.flag))
orderbook$exit.flag  <- ifelse(orderbook$trade.flag == 1 & orderbook$posi.flag  == 0, 1, 0)
orderbook$entry.flag <- ifelse(orderbook$trade.flag == 1 & orderbook$exit.flag  == 0, 1, 0)
orderbook.temp <- orderbook[orderbook$trade.flag == 1,]
orderbook.temp$tradeID <- cumsum(orderbook.temp$entry.flag)
orderbook.temp <- is.exit(orderbook.temp)
orderbook.temp$diff.price <- diff(orderbook.temp$close)
orderbook.temp$posi.temp  <- c(0, orderbook.temp$posi.flag[-length(orderbook.temp$posi.flag)])
orderbook.temp$return <- orderbook.temp$diff.price * orderbook.temp$posi.temp
orderbook.temp <- na.omit(orderbook.temp)
orderbook.temp$return_cumsum <- cumsum(orderbook.temp$return)
plot(orderbook.temp$return_cumsum, type = "l")
saveRDS(orderbook.temp, paste0("./data/result/",symbol.name, "_ense_orderbook.rds"))
saveRDS(orderbook.temp, paste0("../data/result/",symbol.name, "_ense_orderbook.rds"))
source("./helper.R")
symbol.name <- c("USDJPYhour")
test.period <- c("2016-01-01::2017-12-31") # set test period
hidden.size <- 6
nn.model <- data.frame(RSI = rep(0, 3), diffADX = rep(0, 3), uniDMI = rep(0, 3),  # input  layer
Signal = c("-1", "0", "1")                                 # output layer
)
wts.size <- ncol(nn.model) * hidden.size + (hidden.size + 1) * 3  # number of connection
validResult <- readRDS(paste0("../data/result/", symbol.name, "_bestGeneration.rds"))
load("../data/realtimeData2.RData")           # load historical data
test.data <- na.omit(realtimeData2[test.period])    # extract data of test period
indicators <- get_indicators(test.data)
result <- sapply(1:500, function(x){
validResult <- validResult[x,]
# initialize classifers
gtype <- gtype.ini(validResult)                                  # gtype
signal.table <- signal.table.ini(validResult, data = test.data)  # signal.table
position.table <- position.table.ini(data = test.data)           # position.table
# apply test data
for(step in 1:(nrow(test.data) - 1)){
# generates the trading action each agent
step.sig <- apply(gtype, 1, function(x){
ID <- x[length(x)]
x <- as.numeric(x[-length(x)])
ind.sig(gtype = x,
curr.price  = test.data[step,],
curr.vola   = indicators[[4]][step, 1],
signal      = signal.table[step, ID],
posi.price  = position.table[step, c("open", "high", "low", "close")],
posi.flag   = position.table[step,"posi.flag"]
)
})
# combine the output of agents
ense.sig <- as.integer(mode(step.sig))
# update the position
position.table[step + 1,] <- updata.position(ense.sig,
posi.price = position.table[step, c("open", "high", "low", "close")],
posi.flag  = position.table[step,"posi.flag"],
next.price = test.data[step +1,]
)
print(paste(step, " / " , nrow(test.data) - 1, ":", x))
}
# generates the orderbook
orderbook <- cbind(test.data, position.table)
orderbook$trade.flag <- abs(diff(orderbook$posi.flag))
orderbook$exit.flag  <- ifelse(orderbook$trade.flag == 1 & orderbook$posi.flag  == 0, 1, 0)
orderbook$entry.flag <- ifelse(orderbook$trade.flag == 1 & orderbook$exit.flag  == 0, 1, 0)
orderbook.temp <- orderbook[orderbook$trade.flag == 1,]
orderbook.temp$tradeID <- cumsum(orderbook.temp$entry.flag)
orderbook.temp <- is.exit(orderbook.temp)
orderbook.temp$diff.price <- diff(orderbook.temp$close)
orderbook.temp$posi.temp  <- c(0, orderbook.temp$posi.flag[-length(orderbook.temp$posi.flag)])
orderbook.temp$diff.price * orderbook.temp$posi.temp
})
avoil.zero <- function(x) {
if(length(x) == 0) x[1] <- 0
x
}
temp <- sapply(result, avoil.zero)
result2 <- na.fill(do.call(cbind, temp), 0)
mean.return <- apply(result2, 1, mean)
result2$return_cumsum <- cumsum(mean.return)
plot(result2$return_cumsum, type = "l")
saveRDS(result2, paste0("../data/result/",symbol.name, "_avg_orderbook.rds"))
source("./helper.R")
symbol.name <- c("USDJPYhour")
test.period <- c("2016-01-01::2017-07-01") # set test period
load("../data/realtimeData2.RData")
test.data <- na.omit(realtimeData2[test.period])
ens <- readRDS("../data/result/USDJPYhour_ense_orderbook.rds")
avg <- readRDS("../data/result/USDJPYhour_avg_orderbook.rds")
temp <- cbind(ens$return_cumsum, avg$return_cumsum, test.data$close)
temp <- na.omit(na.locf(temp))[,1:2]
plot(temp[,1],minor.ticks=FALSE,major.format="%b-%Y", main ="", ylab = "cumulative return")  # ensemble
lines(temp[,2], col = 2)  # average
legend("topleft", legend=c("Ensemble", "Average"), lty=c(1, 1), col=1:2, bty="n")
tail(ens)  # total return
sum(ens$return > 0) / tail(ens)$tradeID  # win rate
tail(ens)$tradeID  # trades
tail(ens, 1)  # total return
tail(ens, 1)$return_cumsum  # total return
sum(ens$return > 0) / tail(ens, 1)$tradeID  # win rate
tail(ens, 1)$tradeID  # trades
tail(avg[, 501])  # total return
tail(avg[, 501], 1)  # total return
avg_sub <- avg[,-501]  # delete the cumsum return
sum(avg_sub > 0) / sum(avg_sub != 0) # win rate
sum(avg_sub != 0) / 500 # trades
